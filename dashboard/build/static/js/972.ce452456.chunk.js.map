{"version":3,"file":"static/js/972.ce452456.chunk.js","mappings":"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","sources":["views/seller/SellerToCustomer.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { FaList } from 'react-icons/fa6';\r\nimport { IoMdClose } from \"react-icons/io\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { get_customer_message, get_customers,messageClear,send_message,updateMessage } from '../../store/Reducers/chatReducer';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport toast from 'react-hot-toast';\r\nimport { socket } from '../../utils/utils';\r\nconst SellerToCustomer = () => {\r\n    const scrollRef = useRef()\r\n    const {userInfo} = useSelector(state => state.auth)\r\n    const {customers,messages,currentCustomer,successMessage } = useSelector(state => state.chat)\r\n    const {customerId} = useParams()\r\n    const [show, setShow] = useState(false) \r\n   const sellerId = 65 \r\n   const [text,setText] = useState('')\r\n   const [receverMessage,setReceverMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() =>{\r\n        dispatch(get_customers(userInfo._id))\r\n    },[[userInfo._id]])\r\n    useEffect(() =>{\r\n        dispatch(get_customer_message(customerId))\r\n    },[customerId])\r\n    const send = (e) => {\r\n        e.preventDefault() \r\n            dispatch(send_message({\r\n                senderId: userInfo._id, \r\n                receverId: customerId,\r\n                text,\r\n                name: userInfo?.shopInfo?.shopName \r\n            }))\r\n            setText('') \r\n    }\r\n    useEffect(() => {\r\n        if (successMessage) {\r\n            socket.emit('send_seller_message',messages[messages.length - 1])\r\n            dispatch(messageClear())\r\n        }\r\n    },[successMessage,messages])\r\n    useEffect(() => {\r\n        socket.on('customer_message', msg => {\r\n            setReceverMessage(msg)\r\n        })\r\n        return () => {\r\n            socket.off('customer_message') // Nettoie l'écouteur lorsque le composant est démonté\r\n        }\r\n         \r\n    },[])\r\n    useEffect(() => {\r\n        if (receverMessage) {\r\n            if (customerId === receverMessage.senderId && userInfo._id === receverMessage.receverId) {\r\n                dispatch(updateMessage(receverMessage))\r\n            } else {\r\n                toast.success(receverMessage.senderName + \" \" + \"Send A message\")\r\n                dispatch(messageClear())\r\n            }\r\n        }\r\n    },[receverMessage])\r\n    useEffect(() => {\r\n        scrollRef.current?.scrollIntoView({ behavior: 'smooth'})\r\n    },[messages])\r\n    return (\r\n    <div className='px-2 lg:px-7 py-5'>\r\n        <div className='w-full bg-[#6a5fdf] px-4 py-4 rounded-md h-[calc(100vh-140px)]'>\r\n        <div className='flex w-full h-full relative'>\r\n    \r\n    <div className={`w-[280px] h-full absolute z-10 ${show ? '-left-[16px]' : '-left-[336px]'} md:left-0 md:relative transition-all `}>\r\n        <div className='w-full h-[calc(100vh-177px)] bg-[#9e97e9] md:bg-transparent overflow-y-auto'>\r\n        <div className='flex text-xl justify-between items-center p-4 md:p-0 md:px-3 md:pb-3 text-white'>\r\n        <h2>Customers</h2>\r\n        <span onClick={() => setShow(!show)} className='block cursor-pointer md:hidden'><IoMdClose /> </span>\r\n       </div>\r\n\r\n\r\n\r\n\r\n       {\r\n            customers.map((c,i) => <Link key={i} to={`/seller/dashboard/chat-customer/${c.fdId}`} className={`h-[60px] flex justify-start gap-2 items-center text-white px-2 py-2 rounded-md cursor-pointer bg-[#8288ed] `}>\r\n            <div className='relative'>\r\n             <img className='w-[38px] h-[38px] border-white border-2 max-w-[38px] p-[2px] rounded-full' src=\"http://localhost:3001/images/man.png\" alt=\"\" />\r\n             <div className='w-[10px] h-[10px] bg-green-500 rounded-full absolute right-0 bottom-0'></div>\r\n            </div>\r\n    \r\n            <div className='flex justify-center items-start flex-col w-full'>\r\n                <div className='flex justify-between items-center w-full'>\r\n                    <h2 className='text-base font-semibold'>{c.name}</h2>\r\n    \r\n                </div> \r\n\r\n            </div> \r\n            </Link>  )\r\n        }\r\n        \r\n\r\n\r\n       \r\n\r\n        \r\n \r\n\r\n        </div> \r\n    </div>\r\n\r\n    <div className='w-full md:w-[calc(100%-200px)] md:pl-4'>\r\n        <div className='flex justify-between items-center'>\r\n            {\r\n                sellerId && <div className='flex justify-start items-center gap-3'>\r\n           <div className='relative'>\r\n           <img className='w-[45px] h-[45px] border-green-500 border-2 max-w-[45px] p-[2px] rounded-full' src=\"http://localhost:3001/images/man.png\" alt=\"\" />\r\n         <div className='w-[10px] h-[10px] bg-green-500 rounded-full absolute right-0 bottom-0'></div>\r\n        </div>\r\n        <h2 className='text-base text-white font-semibold'>{currentCustomer.name}</h2>\r\n\r\n                </div>\r\n            }\r\n\r\n            <div onClick={()=> setShow(!show)} className='w-[35px] flex md:hidden h-[35px] rounded-sm bg-blue-500 shadow-lg hover:shadow-blue-500/50 justify-center cursor-pointer items-center text-white'>\r\n                <span><FaList/> </span>\r\n            </div> \r\n        </div>\r\n\r\n        <div className='py-4'>\r\n            <div className='bg-[#475569] h-[calc(100vh-290px)] rounded-md p-3 overflow-y-auto'>\r\n            {\r\n        customerId ? messages.map((m,i) => {\r\n            if (m.senderId === customerId) {\r\n                return (\r\n                    <div key={i} ref={scrollRef} className='w-full flex justify-start items-center'>\r\n\r\n                    <div className='flex justify-start items-start gap-2 md:px-3 py-2 max-w-full lg:max-w-[85%]'>\r\n                        <div>\r\n                        <img className='w-[38px] h-[38px] border-2 border-white rounded-full max-w-[38px] p-[3px]' src=\"http://localhost:3001/images/man.png\" alt=\"\" />\r\n\r\n                        </div>\r\n                        <div className='flex justify-center items-start flex-col w-full bg-blue-500 shadow-lg shadow-blue-500/50 text-white py-1 px-2 rounded-sm'>\r\n                        <span>{m.message}</span>\r\n                        </div> \r\n                    </div> \r\n                </div>\r\n\r\n\r\n)\r\n} else {\r\n    return ( \r\n        <div key={i} ref={scrollRef} className='w-full flex justify-end items-center'>\r\n                    <div className='flex justify-start items-start gap-2 md:px-3 py-2 max-w-full lg:max-w-[85%]'>\r\n                        \r\n                        <div className='flex justify-center items-start flex-col w-full bg-red-500 shadow-lg shadow-red-500/50 text-white py-1 px-2 rounded-sm'>\r\n                        <span>{m.message} </span>\r\n                        </div> \r\n                        <div>\r\n                        <img className='w-[38px] h-[38px] border-2 border-white rounded-full max-w-[38px] p-[3px]' src={userInfo.image} alt=\"\" />\r\n\r\n                        </div>\r\n\r\n                    </div> \r\n                </div>\r\n\r\n)\r\n}\r\n}) : <div className='w-full h-full flex justify-center items-center text-white gap-2 flex-col'>\r\n<span>Select Customer </span>\r\n</div>\r\n}\r\n\r\n\r\n                \r\n\r\n            </div> \r\n        </div>\r\n\r\n        <form onSubmit={send} className='flex gap-3'>\r\n            <input value={text} onChange={(e) => setText(e.target.value)} className='w-full flex justify-between px-2 border border-slate-700 items-center py-[5px] focus:border-blue-500 rounded-md outline-none bg-transparent text-[#d0d2d6]' type=\"text\" placeholder='Input Your Message' />\r\n            <button className='shadow-lg bg-[#06b6d4] hover:shadow-cyan-500/50 text-semibold w-[75px] h-[35px] rounded-md text-white flex justify-center items-center'>Send</button>\r\n\r\n        </form>\r\n\r\n\r\n\r\n\r\n    </div>  \r\n\r\n        </div> \r\n\r\n        </div>\r\n        \r\n    </div>\r\n    );\r\n};\r\n\r\nexport default SellerToCustomer;"],"names":["SellerToCustomer","scrollRef","useRef","userInfo","useSelector","state","auth","customers","messages","currentCustomer","successMessage","chat","customerId","useParams","show","setShow","useState","text","setText","receverMessage","setReceverMessage","dispatch","useDispatch","useEffect","get_customers","_id","get_customer_message","socket","emit","length","messageClear","on","msg","off","senderId","receverId","updateMessage","toast","success","senderName","_scrollRef$current","current","scrollIntoView","behavior","_jsx","className","children","_jsxs","concat","onClick","IoMdClose","map","c","i","Link","to","fdId","src","alt","name","FaList","m","ref","message","image","onSubmit","e","_userInfo$shopInfo","preventDefault","send_message","shopInfo","shopName","value","onChange","target","type","placeholder"],"sourceRoot":""}