{"version":3,"file":"static/js/333.ea5c1f18.chunk.js","mappings":"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","sources":["views/admin/ChatSeller.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { FaList } from 'react-icons/fa6';\r\nimport { IoMdClose } from \"react-icons/io\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { get_admin_message, get_sellers, send_message_seller_admin ,messageClear, updateSellerMessage} from '../../store/Reducers/chatReducer'\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { FaRegFaceGrinHearts } from \"react-icons/fa6\";\r\nimport toast from 'react-hot-toast';\r\nimport {socket} from '../../utils/utils'\r\nconst ChatSeller = () => {\r\n    const scrollRef = useRef()\r\n    const [show, setShow] = useState(false) \r\n    const { sellerId } = useParams()\r\n    const [text,setText] = useState('')\r\n    const [receverMessage,setReceverMessage] = useState('')\r\n    const {sellers,activeSeller,seller_admin_message,currentSeller,successMessage} = useSelector(state => state.chat)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(get_sellers())\r\n    })\r\n    const send = (e) => {\r\n        e.preventDefault() \r\n            dispatch(send_message_seller_admin({\r\n                senderId: '', \r\n                receverId: sellerId,\r\n                message: text,\r\n                senderName: 'Admin Support'\r\n            }))\r\n            setText('') \r\n    }\r\n    useEffect(() => {\r\n        if (sellerId) {\r\n            dispatch(get_admin_message(sellerId))\r\n        }\r\n    },[sellerId])\r\n    useEffect(() => {\r\n        if (successMessage) {\r\n            socket.emit('send_message_admin_to_seller',seller_admin_message[seller_admin_message.length - 1])\r\n            dispatch(messageClear())\r\n        }\r\n    },[successMessage])\r\n    useEffect(() => {\r\n        socket.on('receved_seller_message', msg => {\r\n             setReceverMessage(msg)\r\n        })\r\n         \r\n    },[])\r\n    useEffect(() => {\r\n        if (receverMessage) {\r\n            if (receverMessage.senderId === sellerId && receverMessage.\r\n                receverId === '') {\r\n                dispatch(updateSellerMessage(receverMessage))\r\n            } else {\r\n                toast.success(receverMessage.senderName + \" \" + \"Send A message\")\r\n                dispatch(messageClear())\r\n            }\r\n        }\r\n    },[receverMessage])\r\n    useEffect(() => {\r\n        scrollRef.current?.scrollIntoView({ behavior: 'smooth'})\r\n    },[seller_admin_message])\r\n    return (\r\n    <div className='px-2 lg:px-7 py-5'>\r\n        <div className='w-full bg-[#6a5fdf] px-4 py-4 rounded-md h-[calc(100vh-140px)]'>\r\n        <div className='flex w-full h-full relative'>\r\n    \r\n    <div className={`w-[280px] h-full absolute z-10 ${show ? '-left-[16px]' : '-left-[336px]'} md:left-0 md:relative transition-all `}>\r\n        <div className='w-full h-[calc(100vh-177px)] bg-[#9e97e9] md:bg-transparent overflow-y-auto'>\r\n        <div className='flex text-xl justify-between items-center p-4 md:p-0 md:px-3 md:pb-3 text-white'>\r\n        <h2>Sellers</h2>\r\n        <span onClick={() => setShow(!show)} className='block cursor-pointer md:hidden'><IoMdClose /> </span>\r\n       </div>\r\n       {\r\n             sellers.map((s,i) => <Link key={i} to={`/admin/dashboard/chat-sellers/${s._id}`} className={`h-[60px] flex justify-start gap-2 items-center text-white px-2 py-2 rounded-md cursor-pointer ${sellerId === s._id ? 'bg-[#8288ed]' : ''}  `}>\r\n            <div className='relative'>\r\n             <img className='w-[38px] h-[38px] border-white border-2 max-w-[38px] p-[2px] rounded-full' src={s.image} alt=\"\" />\r\n             { \r\n                activeSeller.some(a => a.sellerId === s._id) && <div className='w-[10px] h-[10px] bg-green-500 rounded-full absolute right-0 bottom-0'></div>\r\n             } \r\n            </div>\r\n    \r\n            <div className='flex justify-center items-start flex-col w-full'>\r\n                <div className='flex justify-between items-center w-full'>\r\n                    <h2 className='text-base font-semibold'>{s.name}</h2>\r\n    \r\n                </div> \r\n\r\n            </div> \r\n            </Link>\r\n           )\r\n        }\r\n\r\n\r\n       \r\n \r\n\r\n        </div> \r\n    </div>\r\n\r\n    <div className='w-full md:w-[calc(100%-200px)] md:pl-4'>\r\n        <div className='flex justify-between items-center'>\r\n            {\r\n                sellerId && <div className='flex justify-start items-center gap-3'>\r\n           <div className='relative'>\r\n           <img className='w-[45px] h-[45px] border-green-500 border-2 max-w-[45px] p-[2px] rounded-full' src={currentSeller?.image}  alt=\"\" />\r\n         <div className='w-[10px] h-[10px] bg-green-500 rounded-full absolute right-0 bottom-0'></div>\r\n        </div>\r\n        <span className='text-white'>{currentSeller?.name}</span>\r\n\r\n                </div>\r\n            }\r\n\r\n            <div onClick={()=> setShow(!show)} className='w-[35px] flex md:hidden h-[35px] rounded-sm bg-blue-500 shadow-lg hover:shadow-blue-500/50 justify-center cursor-pointer items-center text-white'>\r\n                <span><FaList/> </span>\r\n            </div> \r\n        </div>\r\n\r\n        <div className='py-4'>\r\n            <div className='bg-[#475569] h-[calc(100vh-290px)] rounded-md p-3 overflow-y-auto'>\r\n            {\r\n               sellerId ?  seller_admin_message.map((m, i) => {\r\n                    if (m.senderId === sellerId) {\r\n                        return(\r\n                            <div ref={scrollRef} className='w-full flex justify-start items-center'>\r\n                        <div className='flex justify-start items-start gap-2 md:px-3 py-2 max-w-full lg:max-w-[85%]'>\r\n                            <div>\r\n                            <img className='w-[38px] h-[38px] border-2 border-white rounded-full max-w-[38px] p-[3px]' src=\"http://localhost:3001/images/demo.jpg\" alt=\"\" />\r\n                            </div>\r\n                            <div className='flex justify-center items-start flex-col w-full bg-blue-500 shadow-lg shadow-blue-500/50 text-white py-1 px-2 rounded-sm'>\r\n                            <span>{m.message} </span>\r\n                            </div> \r\n                        </div> \r\n                    </div>\r\n                        )\r\n                    } else {\r\n                        return(\r\n                            <div ref={scrollRef} className='w-full flex justify-end items-center'>\r\n                    <div className='flex justify-start items-start gap-2 md:px-3 py-2 max-w-full lg:max-w-[85%]'>\r\n                        \r\n                        <div className='flex justify-center items-start flex-col w-full bg-red-500 shadow-lg shadow-red-500/50 text-white py-1 px-2 rounded-sm'>\r\n                        <span>{m.message} </span>\r\n                        </div> \r\n                        <div>\r\n                        <img className='w-[38px] h-[38px] border-2 border-white rounded-full max-w-[38px] p-[3px]' src=\"http://localhost:3001/images/admin.jpg\" alt=\"\" />\r\n                        </div>\r\n\r\n                    </div> \r\n                </div>\r\n\r\n\r\n                 )\r\n                    }\r\n                }) : <div className='w-full h-full flex justify-center items-center flex-col gap-2 text-white'>\r\n                    <span><FaRegFaceGrinHearts /></span>\r\n                    <span>Select Seller </span>\r\n                </div>\r\n}\r\n            </div> \r\n        </div>\r\n\r\n        <form onSubmit={send} className='flex gap-3'>\r\n            <input readOnly={sellerId ? false : true} value={text} onChange={(e) => setText(e.target.value)}  className='w-full flex justify-between px-2 border border-slate-700 items-center py-[5px] focus:border-blue-500 rounded-md outline-none bg-transparent text-[#d0d2d6]' type=\"text\" placeholder='Input Your Message' />\r\n            <button disabled={sellerId ? false : true} className='shadow-lg bg-[#06b6d4] hover:shadow-cyan-500/50 text-semibold w-[75px] h-[35px] rounded-md text-white flex justify-center items-center'>Send</button>\r\n\r\n        </form>\r\n\r\n\r\n\r\n    </div>  \r\n\r\n        </div> \r\n\r\n        </div>\r\n        \r\n    </div>\r\n    );\r\n};\r\n\r\nexport default ChatSeller;"],"names":["ChatSeller","scrollRef","useRef","show","setShow","useState","sellerId","useParams","text","setText","receverMessage","setReceverMessage","sellers","activeSeller","seller_admin_message","currentSeller","successMessage","useSelector","state","chat","dispatch","useDispatch","useEffect","get_sellers","get_admin_message","socket","emit","length","messageClear","on","msg","senderId","receverId","updateSellerMessage","toast","success","senderName","_scrollRef$current","current","scrollIntoView","behavior","_jsx","className","children","_jsxs","concat","onClick","IoMdClose","map","s","i","Link","to","_id","src","image","alt","some","a","name","FaList","m","ref","message","FaRegFaceGrinHearts","onSubmit","e","preventDefault","send_message_seller_admin","readOnly","value","onChange","target","type","placeholder","disabled"],"sourceRoot":""}